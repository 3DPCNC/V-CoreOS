#!/bin/bash
# MainsailOS Updater Script
# Written by Nomsplease
# GPL V3
########

## Directory Variables

KLIPPER_PYTHON_DIR="${HOME}/klippy-env"
KLIPPER_SOURCE_DIR="${HOME}/klipper"
MOONRAKER_PYTHON_DIR="${HOME}/moonraker-env"
MOONRAKER_SOURCE_DIR="${HOME}/moonraker"

## Module Variables

UpdaterInstallPath="/usr/local/bin/mainsailos-updater"
UpdaterSource="https://raw.githubusercontent.com/raymondh2/MainsailOS/master/src/modules/updater/filesystem/root/usr/local/bin/mainsailos-updater"

## Bash Color
RED='\033[0;31m'
GREEN='\033[0;32m'
PURP='\033[0;35m'
CYAN='\033[0;36m'
YELLOW='\033[0;93m'
NOCOLOR='\033[0m'

## Arg Variables

Check=0
Upgrade=0
Changelog=0
KlipperOnly=0
MoonrakerOnly=0
ToolsOnly=0
ForceUpgrade=0

########################
# Program flag parsing #
########################
arg_parser() {
    if [ $Check -eq 1 ] && [ $Upgrade -eq 1 ]; then
        echo_error "Please provide only check or upgrade flags"
        exit -1
    fi
    if [ $Check -eq 1 ]; then
        if [ $KlipperOnly -eq 0 ] && [ $MoonrakerOnly -eq 0 ] && [ $ToolsOnly -eq 0 ]; then
            check_klipper
            check_moonraker
            check_tools
            exit 1
        elif [ $KlipperOnly -eq 1 ]; then
            check_klipper
            exit 1
        elif [ $MoonrakerOnly -eq 1 ]; then
            check_moonraker
            exit 1
        elif [ $ToolsOnly -eq 1 ]; then
            check_tools
            exit 1
        fi
    elif [ $Upgrade -eq 1 ]; then
        if [ $KlipperOnly -eq 0 ] && [ $MoonrakerOnly -eq 0 ] && [ $ToolsOnly -eq 0 ]; then
            check_klipper_upgrade
            check_moonraker_upgrade
            check_tools_upgrade
            exit 1
        elif [ $KlipperOnly -eq 1 ]; then
            check_klipper_upgrade
            exit 1
        elif [ $MoonrakerOnly -eq 1 ]; then
            check_moonraker_upgrade
            exit 1
        elif [ $ToolsOnly -eq 1 ]; then
            check_tools_upgrade
            exit 1
        fi
    elif [ $Changelog -eq 1 ]; then
        if [ $KlipperOnly -eq 0 ] && [ $MoonrakerOnly -eq 0 ] && [ $ToolsOnly -eq 0 ]; then
            changelog_klipper
            changelog_moonraker
            exit 1
        elif [ $KlipperOnly -eq 1 ]; then
            changelog_klipper
            exit 1
        elif [ $MoonrakerOnly -eq 1 ]; then
            changelog_moonraker
            exit 1
        fi
    fi
}

##########################
# Service Upgrade checks #
##########################
check_moonraker() {
    cd ${MOONRAKER_SOURCE_DIR}
    git fetch -q
    MoonrakerLatest=`git log --pretty=format:%H -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    MoonrakerCurrent=`git rev-parse HEAD`
    if [ $MoonrakerCurrent == $MoonrakerLatest ]; then
        echo_success "Moonraker up to date"
        echo "Commit: $MoonrakerCurrent"
    else
        echo_error "Moonraker not up to date"
        echo "Current commit: $MoonrakerCurrent"
        echo "Latest Commit: $MoonrakerLatest"
    fi
}

check_klipper() {
    cd ${KLIPPER_SOURCE_DIR}
    git fetch -q
    KlipperLatest=`git log --pretty=format:%H -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    KlipperCurrent=`git rev-parse HEAD`
    if [ $KlipperCurrent == $KlipperLatest ]; then
        echo_success "Klipper up to date"
        echo "Commit: $KlipperCurrent"
    else
        echo_error "Klipper not up to date"
        echo "Current commit: $KlipperCurrent"
        echo "Latest Commit: $KlipperLatest"
    fi
}

check_tools() {
    updaterCurrent=`sha1sum $UpdaterInstallPath | awk '{print $1}'`
    updaterLatest=`curl -s $UpdaterSource | sha1sum | awk '{print $1}'`
    if [ $updaterCurrent == $updaterLatest ]; then
        echo_success "Tools up to date"
    else
        echo_error "Tools not up to date"
        echo_important "Recommend upgrading tools alone before any further updates"
        echo_important "Use: mainsailos-updater --upgrade --tools"
    fi
}

################################
# Service Changelog Generation #
################################
changelog_klipper() {
    cd ${KLIPPER_SOURCE_DIR}
    git fetch -q
    KlipperLatest=`git log --pretty=format:%h -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    KlipperCurrent=`git rev-parse --short HEAD`
    if [ $KlipperCurrent == $KlipperLatest ]; then
        echo_success "Klipper already up to date, no changelog will happen"
    else
        echo_success "Klipper Changelog"
        echo -e "##################\n\n"
        git --no-pager log --oneline --ancestry-path $KlipperCurrent..$KlipperLatest
    fi
}

changelog_moonraker() {
    cd ${MOONRAKER_SOURCE_DIR}
    git fetch -q
    MoonrakerLatest=`git log --pretty=format:%h -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    MoonrakerCurrent=`git rev-parse --short HEAD`
    if [ $MoonrakerCurrent == $MoonrakerLatest ]; then
        echo_success "Moonraker already up to date, no changelog will happen"
    else
        echo_success "Moonraker Changelog"
        echo -e "###################\n\n"
        git --no-pager log --oneline --ancestry-path $MoonrakerCurrent..$MoonrakerLatest
    fi
}

#############################
# Service Upgrade functions #
#############################
check_klipper_upgrade() {
    cd ${KLIPPER_SOURCE_DIR}
    KlipperLatest=`git log --pretty=format:%H -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    KlipperCurrent=`git rev-parse HEAD`
    if [ $KlipperCurrent == $KlipperLatest ]; then
        echo_success "Kliiper already up to date."
        if [ $ForceUpgrade -eq 1 ]; then
            echo_warn "Force flag used, forcing upgrade"
            upgrade_klipper
        fi
    else
        upgrade_klipper
    fi
}
upgrade_klipper() {
    StopKlipper
    report_status "Upgrading Klipper..."
    cd ${KLIPPER_SOURCE_DIR}
    git pull
    install_packages
    report_status "Installing Klipper..."
    create_klipper_venv
    install_klipper_script
    install_klipper_config
    RestartKlipper
}

check_moonraker_upgrade() {
    cd ${MOONRAKER_SOURCE_DIR}
    MoonrakerLatest=`git log --pretty=format:%H -n 1 $(git rev-parse --abbrev-ref --symbolic-full-name @{u})`
    MoonrakerCurrent=`git rev-parse HEAD`
    if [ $MoonrakerCurrent == $MoonrakerLatest ]; then
        echo_success "Moonraker up to date"
        if [ $ForceUpgrade -eq 1 ]; then
            echo_warn "Force flag used, forcing upgrade"
            upgrade_moonraker
        fi
    else
        upgrade_moonraker
    fi
}
upgrade_moonraker() {
    StopMoonraker
    report_status "Upgrading Moonraker..."
    cd ${MOONRAKER_SOURCE_DIR}
    git pull
    report_status "Installing Moonraker..."
    create_moonraker_venv
    install_moonraker_script
    install_moonraker_config
    RestartMoonraker
}

check_tools_upgrade() {
    updaterCurrent=`sha1sum $UpdaterInstallPath | awk '{print $1}'`
    updaterLatest=`curl -s $UpdaterSource | sha1sum | awk '{print $1}'`
    if [ $updaterCurrent == $updaterLatest ]; then
        echo_success "Updater module up to date"
        if [ $ForceUpgrade -eq 1 ]; then
            echo_warn "Force flag used, forcing upgrade"
            upgrade_tools
        fi
    else
        upgrade_tools
    fi
}

upgrade_tools() {
    report_status "Upgrading tools..."
    sudo wget $UpdaterSource -O $UpdaterInstallPath
    sudo chmod +x $UpdaterInstallPath
    echo_warn "Tool upgrades finished"
}

######################################
# Klipper Specific upgrade Functions #
######################################
install_packages()
{
    # Packages for python cffi
    PKGLIST="python-virtualenv virtualenv python-dev libffi-dev build-essential"
    # kconfig requirements
    PKGLIST="${PKGLIST} libncurses-dev"
    # hub-ctrl
    PKGLIST="${PKGLIST} libusb-dev"
    # AVR chip installation and building
    PKGLIST="${PKGLIST} avrdude gcc-avr binutils-avr avr-libc"
    # ARM chip installation and building
    PKGLIST="${PKGLIST} stm32flash dfu-util libnewlib-arm-none-eabi"
    PKGLIST="${PKGLIST} gcc-arm-none-eabi binutils-arm-none-eabi libusb-1.0"

    PKGLIST="${PKGLIST} python3-virtualenv python3-dev nginx"

    # Update system package info
    report_status "Running apt-get update..."
    sudo apt-get update

    # Install desired packages
    report_status "Installing packages..."
    sudo apt-get install --yes ${PKGLIST}
}

create_klipper_venv()
{
    report_status "Updating Klippy python virtual environment..."

    # Create virtualenv if it doesn't already exist
    [ ! -d ${KLIPPER_PYTHON_DIR} ] && virtualenv ${KLIPPER_PYTHON_DIR}

    # Install/update dependencies
    ${KLIPPER_PYTHON_DIR}/bin/pip install -r ${KLIPPER_SOURCE_DIR}/scripts/klippy-requirements.txt
}

install_klipper_script()
{
    report_status "Installing Klipper system start script..."
    sudo cp "${KLIPPER_SOURCE_DIR}/scripts/klipper-start.sh" /etc/init.d/klipper
    sudo update-rc.d klipper defaults
}

install_klipper_config()
{
    KLIPPER_DEFAULTS_FILE=/etc/default/klipper
    [ -f $KLIPPER_DEFAULTS_FILE ] && return

    report_status "Installing system start configuration..."
    sudo /bin/sh -c "cat > $KLIPPER_DEFAULTS_FILE" <<EOF
# Configuration for /etc/init.d/klipper

KLIPPY_USER=$USER

KLIPPY_EXEC=${KLIPPER_PYTHON_DIR}/bin/python

KLIPPY_ARGS="${KLIPPER_SOURCE_DIR}/klippy/klippy.py ${HOME}/klipper_config/printer.cfg -l /tmp/klippy.log -a /tmp/klippy_uds"

EOF
}

StopKlipper() {
    report_status "Stopping Klipper host software..."
    sudo /etc/init.d/klipper stop
}

RestartKlipper() {
    report_status "Restarting Klipper host software..."
    sudo /etc/init.d/klipper restart
}

########################################
# Moonraker Specific upgrade Functions #
########################################
create_moonraker_venv()
{
    report_status "Updating Moonraker python virtual environment..."

    # Create virtualenv if it doesn't already exist
    [ ! -d ${MOONRAKER_PYTHON_DIR} ] && virtualenv -p /usr/bin/python3 ${MOONRAKER_PYTHON_DIR}

    # Install/update dependencies
    ${MOONRAKER_PYTHON_DIR}/bin/pip install -r ${MOONRAKER_SOURCE_DIR}/scripts/moonraker-requirements.txt
}


install_moonraker_script()
{
    report_status "Installing Moonraker system start script..."
    sudo cp "${MOONRAKER_SOURCE_DIR}/scripts/moonraker-start.sh" /etc/init.d/moonraker
    sudo update-rc.d moonraker defaults
}


install_moonraker_config()
{
    MOONRAKER_DEFAULTS_FILE=/etc/default/moonraker
    [ -f $MOONRAKER_DEFAULTS_FILE ] && return

    report_status "Installing Moonraker system start configuration..."
    sudo /bin/sh -c "cat > $MOONRAKER_DEFAULTS_FILE" <<EOF
# Configuration for /etc/init.d/moonraker

MOONRAKER_USER=$USER

MOONRAKER_EXEC=${MOONRAKER_PYTHON_DIR}/bin/python

MOONRAKER_ARGS="${MOONRAKER_SOURCE_DIR}/moonraker/moonraker.py -c ${HOME}/klipper_config/moonraker.conf"

EOF
}

StopMoonraker() {
    report_status "Stopping moonraker software..."
    sudo /etc/init.d/moonraker stop
}

RestartMoonraker() {
    report_status "Restarting moonraker software..."
    sudo /etc/init.d/moonraker restart
}


####################
# Helper functions #
####################
report_status()
{
    echo -e "\n\n${CYAN}###### $1${NOCOLOR}"
}

echo_error()
{
    echo -e "${RED}$1${NOCOLOR}"
}

echo_success()
{
    echo -e "${GREEN}$1${NOCOLOR}"
}

echo_warn()
{
    echo -e "${PURP}$1${NOCOLOR}"
}

echo_important()
{
    echo -e "${YELLOW}$1${NOCOLOR}"
}

verify_ready()
{
    if [ "$EUID" -eq 0 ]; then
        echo -e "${RED}This script must not run as root${NOCLOR}"
        exit -1
    fi
}

##################
# Menu functions #
##################
print_help() {
    echo -e "Usage: mainsailos-update [SERVICE] [OPTION]"
    echo -e "  -c, --check-upgrade  Check for upgrades on all services"
    echo -e "  -s, --show-changes   Show changelogs for service(s). ${PURP}Can print pages of changes${NOCOLOR}"
    echo -e "  -u, --upgrade        Upgrade MainsailOS service(s). ${PURP}Defaults to all services${NOCOLOR}"
    echo -e "  --klipper            Check or upgrade only klipper"
    echo -e "  --moonraker          Check or upgrade only Moonraker"
    echo -e "  --tools              Check or Upgrade MainsailOS Tools"
    echo -e "  --force              Force upgrade process. ${PURP}Must also use upgrade flag${NOCOLOR}"
    echo -e "  -h, -?, --help       Shows this help menu"
    exit -1
}

# Force script to exit if an error occurs
set -e

verify_ready

if [ $# -eq 0 ]; then
echo_error "Run flag not specified"
print_help
exit -1
fi

for arg in "$@"
do
    case $arg in
        -c|--check-upgrade)
        Check=1
        shift
        ;;
        -s|--show-changes)
        Changelog=1
        shift
        ;;
        -u|--upgrade)
        Upgrade=1
        shift
        ;;
        --klipper)
        KlipperOnly=1
        shift
        ;;
        --moonraker)
        MoonrakerOnly=1
        shift
        ;;
        --tools)
        ToolsOnly=1
        shift
        ;;
        --force)
        ForceUpgrade=1
        shift
        ;;
        -h|--help|-\?)
        print_help
        shift
        ;;
    esac
done

arg_parser
